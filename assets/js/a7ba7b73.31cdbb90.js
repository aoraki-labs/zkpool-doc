"use strict";(self.webpackChunkzkpool_doc=self.webpackChunkzkpool_doc||[]).push([[494],{3905:(e,r,o)=>{o.d(r,{Zo:()=>p,kt:()=>v});var t=o(7294);function n(e,r,o){return r in e?Object.defineProperty(e,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[r]=o,e}function a(e,r){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?a(Object(o),!0).forEach((function(r){n(e,r,o[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(o,r))}))}return e}function l(e,r){if(null==e)return{};var o,t,n=function(e,r){if(null==e)return{};var o,t,n={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],r.indexOf(o)>=0||(n[o]=e[o]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],r.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var c=t.createContext({}),u=function(e){var r=t.useContext(c),o=r;return e&&(o="function"==typeof e?e(r):i(i({},r),e)),o},p=function(e){var r=u(e.components);return t.createElement(c.Provider,{value:r},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var o=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=u(o),m=n,v=s["".concat(c,".").concat(m)]||s[m]||d[m]||a;return o?t.createElement(v,i(i({ref:r},p),{},{components:o})):t.createElement(v,i({ref:r},p))}));function v(e,r){var o=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=m;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[s]="string"==typeof e?e:n,i[1]=l;for(var u=2;u<a;u++)i[u]=o[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},9222:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var t=o(7462),n=(o(7294),o(3905));const a={sidebar_label:"How to Run a Prover",sidebar_position:3},i="How to Run a Prover",l={unversionedId:"guides/how-to-run-prover",id:"guides/how-to-run-prover",title:"How to Run a Prover",description:"This document represent on how to run a standalone uniform ZK Pool prover build upon multiple ZKP circuit projects.",source:"@site/docs/guides/how-to-run-prover.md",sourceDirName:"guides",slug:"/guides/how-to-run-prover",permalink:"/guides/how-to-run-prover",draft:!1,editUrl:"https://github.com/aoraki-labs/zkpool-doc/tree/main/docs/guides/how-to-run-prover.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"How to Run a Prover",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"How to Register",permalink:"/guides/how-to-register"}},c={},u=[{value:"Environment requirements",id:"environment-requirements",level:3},{value:"run zkpool-prover with one command",id:"run-zkpool-prover-with-one-command",level:3},{value:"Compile and run zkpool-prover from source code",id:"compile-and-run-zkpool-prover-from-source-code",level:3}],p={toc:u},s="wrapper";function d(e){let{components:r,...o}=e;return(0,n.kt)(s,(0,t.Z)({},p,o,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"how-to-run-a-prover"},"How to Run a Prover"),(0,n.kt)("p",null,"This document represent on how to run a standalone uniform ZK Pool prover build upon multiple ZKP circuit projects. "),(0,n.kt)("h3",{id:"environment-requirements"},"Environment requirements"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"UNIX-like OS (Ubuntu 20.04,Ubuntu22.04 recommend)"),(0,n.kt)("li",{parentName:"ul"},"Rust 1.65.0+")),(0,n.kt)("h3",{id:"run-zkpool-prover-with-one-command"},"run zkpool-prover with one command"),(0,n.kt)("p",null,"Notice: please replace the ",(0,n.kt)("inlineCode",{parentName:"p"},"<account_access_key>")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"<device_id>")," with your own account access key and device id."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf -L https://zkpool-connect-1318455074.cos.na-siliconvalley.myqcloud.com/prover-client/join_zkpool_ubuntu-20.04_cpu.sh | sudo sh -s -- --access-key <account_access_key> --device-id <device_id>    \n")),(0,n.kt)("h3",{id:"compile-and-run-zkpool-prover-from-source-code"},"Compile and run zkpool-prover from source code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/aoraki-labs/zkpool-prover.git\n\ncd zkpool-prover\ncargo build --release\nwget https://storage.googleapis.com/zkevm-circuits-keys/kzg_bn254_21.srs -P ./target/release\n\ncd ./target/release\n./zkpool-prover -k <account_access_key> -u <device_id> -p <scheduler_address>\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"zkpool-prover parameters")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"-k: the prover access key\n-u: the prover device id (optional,program will generate one automatically if not set )\n-p: the zkpool scheduler pool address\n")))}d.isMDXComponent=!0}}]);