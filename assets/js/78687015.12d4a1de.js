"use strict";(self.webpackChunkzkpool_doc=self.webpackChunkzkpool_doc||[]).push([[558],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>v});var o=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=o.createContext({}),u=function(e){var r=o.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=u(e.components);return o.createElement(c.Provider,{value:r},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=u(t),m=n,v=s["".concat(c,".").concat(m)]||s[m]||d[m]||a;return t?o.createElement(v,i(i({ref:r},p),{},{components:t})):o.createElement(v,i({ref:r},p))}));function v(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[s]="string"==typeof e?e:n,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3807:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var o=t(7462),n=(t(7294),t(3905));const a={sidebar_position:7},i=void 0,l={unversionedId:"tutorial-basics/how-to-run-prover",id:"tutorial-basics/how-to-run-prover",title:"how-to-run-prover",description:"Introduction",source:"@site/docs/tutorial-basics/how-to-run-prover.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/how-to-run-prover",permalink:"/tutorial-basics/how-to-run-prover",draft:!1,editUrl:"https://github.com/aoraki-labs/zkpool-doc/tree/main/docs/tutorial-basics/how-to-run-prover.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Congratulations!",permalink:"/tutorial-basics/congratulations"},next:{title:"Tutorial - Extras",permalink:"/category/tutorial---extras"}},c={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Environment requirements",id:"environment-requirements",level:3},{value:"run zkpool-prover with one command",id:"run-zkpool-prover-with-one-command",level:3},{value:"Compile and run zkpool-prover from source code",id:"compile-and-run-zkpool-prover-from-source-code",level:3}],p={toc:u},s="wrapper";function d(e){let{components:r,...t}=e;return(0,n.kt)(s,(0,o.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"This document represent on how to run a standalone uniform ZK Pool prover build upon multiple ZKP circuit projects. "),(0,n.kt)("h3",{id:"environment-requirements"},"Environment requirements"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"UNIX-like OS (Ubuntu 20.04,Ubuntu22.04 recommend)"),(0,n.kt)("li",{parentName:"ul"},"Rust 1.65.0+")),(0,n.kt)("h3",{id:"run-zkpool-prover-with-one-command"},"run zkpool-prover with one command"),(0,n.kt)("p",null,"Notice: please replace the ",(0,n.kt)("inlineCode",{parentName:"p"},"<account_access_key>")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"<device_id>")," with your own account access key and device id."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf -L https://zkpool-connect-1318455074.cos.na-siliconvalley.myqcloud.com/prover-client/join_zkpool_ubuntu-20.04_cpu.sh | sudo sh -s -- --access-key <account_access_key> --device-id <device_id>    \n")),(0,n.kt)("h3",{id:"compile-and-run-zkpool-prover-from-source-code"},"Compile and run zkpool-prover from source code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/aoraki-labs/zkpool-prover.git\n\ncd zkpool-prover\ncargo build --release\nwget https://storage.googleapis.com/zkevm-circuits-keys/kzg_bn254_21.srs -P ./target/release\n\ncd ./target/release\n./zkpool-prover -k <account_access_key> -u <device_id> -p <scheduler_address>\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"zkpool-prover parameters")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"-k: the prover access key\n-u: the prover device id (optional,program will generate one automatically if not set )\n-p: the zkpool scheduler pool address\n")))}d.isMDXComponent=!0}}]);